#!/usr/bin/env python

import sys
import numpy as np
from glob import glob

import matplotlib as mpl
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.patheffects as pe
from matplotlib import ticker

from mpl_toolkits.axes_grid1.axes_divider import make_axes_locatable
from mpl_toolkits.axes_grid1.colorbar import colorbar

# Input files
meanfiles = glob('*_mean.txt')

nfiles = len(meanfiles)


fig, axes = plt.subplots(ncols=1, nrows=nfiles, figsize=(10,6))
fig2, ax2 = plt.subplots(1)
colormap = plt.cm.nipy_spectral 
ax2.set_prop_cycle('color', [colormap(i) for i in np.linspace(0, 1,nfiles)])
cmap = [colormap(i) for i in np.linspace(0,1,nfiles)]
print(fig)


# Test to ground truth against means and stds calculated by Dan
#f, Ts, logres, pdf, avgs, stds = np.loadtxt('Z16slab_PDF.out.2', unpack=True)
#ax2.plot(np.log10(Ts), avgs, color='purple', label='z16slab_dan', marker='o')
#ax2.fill_between(np.log10(Ts), avgs+stds, avgs-stds, color='grey', alpha=0.2, linestyle='--')

#cmaps: bwr, seismic, RdBu_r
# other: PuOr_r
for i,mf in enumerate(meanfiles):
    modelname = mf.split('_')[0]
    Ts, dum, xbin_left, xbin_right, avgs, stds = np.loadtxt(mf, unpack=True)
    xbins = np.append(xbin_left, xbin_right[-1])
    counts, xedges, yedges, image = axes[i].hist2d(Ts, np.zeros(len(Ts)), weights=avgs, bins=[xbins, [-2,2]], cmap='bwr', vmin=-2, vmax=2)
    #axes[i].plot(Ts[2:], avgs[2:], 'o', mfc='None', mec='black')
    #axes[i].plot([xbins[2], xbins[-1]], [0,0], color='grey', ls='--')

# Plot mean lines
#    if i==0:
    ax2.plot(Ts[2:], avgs[2:], color=cmap[i], label=modelname, marker='o')
#        ax2.plot(Ts[2:], avgs[2:]+stds[2:], color=cmap[i])#, label=modelname, marker='o')
#        ax2.plot(Ts[2:], avgs[2:]-stds[2:], color=cmap[i])#, label=modelname, marker='o')
    ax2.fill_between(Ts[2:], avgs[2:]+stds[2:], avgs[2:]-stds[2:], color=cmap[i], alpha=0.2)
# alternative: plot mean, but over whole bin width
#    bin_repeat = np.repeat(xbins,3)[1:-1]
#    avg_repeat = np.append(np.repeat(avgs,3), avgs[-1])
#    ax2.plot(bin_repeat, avg_repeat, label=modelname)

#    axes[i].set_xlim(xbins[2], xbins[-1])
    axes[i].set_xlim(xbins[0], xbins[-1])
#    axes[i].yaxis.set_visible(False) 
    plt.setp(axes[i].get_yticklabels(), visible=False)
    axes[i].yaxis.set_major_locator(plt.NullLocator())
    axes[i].xaxis.set_major_locator(plt.NullLocator())
#    plt.setp(axes[i].get_ylabel(), rotation=0)
    axes[i].set_ylabel(modelname, rotation=0, ha='right', va='center')
    
    if i != nfiles-1:
        ax_log = axes[i].twiny()
        ax_log.set_xlim(10**xbins[2], 10**xbins[-1])
        ax_log.semilogx()
        axes[i].xaxis.set_visible(False) 
        ax_log.xaxis.set_ticks_position('bottom')
        plt.setp(ax_log.get_xticklabels(), visible=False)


ax2.set_ylabel('Mean residual log10(obs)-log10(pred)')
ax2.plot([xbins[2], xbins[-1]], [0,0], ls='--', color='grey')
ax2.set_xlim(xbins[2], xbins[-1])

ax2_log = ax2.twiny()
ax2.set_ylim(-2,2)
#ax2.legend(ncol=2, numpoints=1)
ax2.legend(ncol=3, numpoints=1)
ax2_log.set_xlabel('Period (s)', fontsize='large')
ax2_log.semilogx()
ax2_log.set_xlim(10**xbins[2], 10**xbins[-1])
ax2_log.xaxis.set_ticks_position('bottom')
ax2_log.xaxis.set_label_position('bottom')
ax2.xaxis.set_visible(False)
formatter = matplotlib.ticker.FormatStrFormatter('%.1f')
ax2_log.get_xaxis().set_major_formatter(formatter) 



ax3 = axes[-1].twiny()
ax3.set_xlabel('Period (s)', fontsize='large')
ax3.semilogx()
#ax3.tick_params(labelsize='large', direction='inout', which='both')
#ax3.tick_params(axis='x', which='major', length=15)
#ax3.tick_params(axis='x', which='minor', length=8)
#ax3.tick_params(labelbottom=True, labeltop=False)
ax3.xaxis.set_ticks_position('bottom')
ax3.xaxis.set_label_position('bottom')

#ax3.set_xlim(10**(np.min(xbins)), 10**np.max(xbins))
ax3.set_xlim(10**xbins[2], 10**xbins[-1])
formatter = matplotlib.ticker.FormatStrFormatter('%.1f')
ax3.get_xaxis().set_major_formatter(formatter) 

#ax4 = axes[0].twiny()
#ax4.semilogx()


#ax4.tick_params(axis='x', which='major', length=15)
#ax4.tick_params(axis='x', which='minor', length=8)
#ax4.set_xlim(10**(np.min(xbins)), 10**np.max(xbins))
#formatter = matplotlib.ticker.FormatStrFormatter('%.1f')
#ax4.get_xaxis().set_major_formatter(formatter) 

#ax2_divider = make_axes_locatable(axes[0])
#cax2 = ax2_divider.append_axes("top", size="7%", pad="100%")
#cb2 = colorbar(image, cax=cax2, orientation='horizontal')
#cax2.xaxis.set_ticks_position("top")
print(image)
#fig.colorbar(image, ax=axes)
#fig.colorbar(image, shrink=0.7, ax=fig.axes, orientation='horizontal')
cb = fig.colorbar(image, shrink=0.7, ax=fig.axes, orientation='vertical', extend='both', label='Mean residual log10(obs)-log10(pred)')
loc = ticker.MultipleLocator(base=0.5)
cb.locator = loc
cb.update_ticks()
#ax_cb = axes[-1]
#ax_cb = fig.add_axes([0.5, 0.99, 0.3, 0.05])
#fig.colorbar(image, cax=ax_cb, orientation='horizontal')

#plt.tight_layout()
fig.savefig('resmeans_heat.png')
fig.savefig('resmeans_heat.eps')
fig2.savefig('resmeans_lines.png')
fig2.savefig('resmeans_lines.eps')
#plt.show()
